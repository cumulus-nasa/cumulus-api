service: cumulus-workflow-engine # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
        - "datapipeline:*"
        - "dynamodb:*"
        - "iam:PassRole"
      Resource:
        - "*"

plugins:
  - serverless-offline

functions:

  # stats summary
  signup:
    handler: handlers/auth.signup
    timeout: 300
    events:
      - http:
          path: signup
          method: post
          cors: true

  # stats summary
  signin:
    handler: handlers/auth.signin
    timeout: 300
    events:
      - http:
          path: signin
          method: post
          cors: true

  # stats summary
  statsSummary:
    handler: handlers/stats.summary
    timeout: 300
    events:
      - http:
          path: stats/summary
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  # stats summary grouped
  statsSummaryGrouped:
    handler: handlers/stats.summaryGrouped
    timeout: 300
    events:
      - http:
          path: stats/summary/grouped
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  # get error stats
  getErrorCounts:
    handler: handlers/errors.counts
    timeout: 300
    events:
      - http:
          path: stats/errors
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  # get list of errors
  listErrors:
    handler: handlers/errors.list
    timeout: 300
    events:
      - http:
          path: errors
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  # list all granules
  listGranules:
    handler: handlers/granules.list
    timeout: 300
    events:
      - http:
          path: granules/{collection}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  getGranules:
    handler: handlers/granules.get
    timeout: 300
    events:
      - http:
          path: granules/{collection}/{granuleName}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  # list all collections
  listCollections:
    handler: handlers/collections.list
    timeout: 300
    events:
      - http:
          path: collections
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  # get a particular collection
  getCollection:
    handler: handlers/collections.get
    timeout: 300
    events:
      - http:
          path: collections/{short_name}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  # post a new collection
  postCollection:
    handler: handlers/collections.post
    timeout: 300
    events:
      - http:
          path: collections
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  # put/update an existing collection
  putCollection:
    handler: handlers/collections.put
    timeout: 300
    events:
      - http:
          path: collections
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            id: b961m7
          cors: true

  # trigger lambda
  trigger:
    handler: handlers/triggers.trigger
    timeout: 300
