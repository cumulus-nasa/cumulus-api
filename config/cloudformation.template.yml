AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cumulus-API deployment | stack: {{stackName}} | stage: {{stage}}'
Parameters:
  ConfigS3Bucket:
    Type: String
    Description: S3 bucket that holds deployment artifacts
  ArtifactPath:
    Type: String
    Description: Path within the deployment bucket containing artifacts

Resources:

  # role for EC2/ECS instaces used by Cumulus
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ECSRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow writing to ingest buckets
              - Effect: Allow
                Action:
                - s3:AbortMultipartUpload
                - s3:Get*
                - s3:Put*
                - s3:List*
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                Resource:
                - !Sub arn:aws:s3:::{{buckets.internal}}
                - !Sub arn:aws:s3:::{{buckets.internal}}/*
                - !Sub arn:aws:s3:::{{buckets.private}}
                - !Sub arn:aws:s3:::{{buckets.private}}/*

              # Allow to call other lambdas
              - Effect: Allow
                Action:
                - lambda:GetFunction
                - lambda:invokeFunction
                Resource:
                - "*"

              # Allow access to SQS
              - Effect: Allow
                Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:ChangeMessageVisibility
                - sqs:DeleteMessage
                - sqs:GetQueueUrl
                - sqs:GetQueueAttributes
                Resource:
                - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:{{stackName}}-*"

              # Allow use of dynamo
              - Effect: Allow
                Action:
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
                - dynamodb:DeleteItem
                - dynamodb:GetItem
                - dynamodb:GetRecords
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:UpdateItem
                Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{stackName}}-*

              # Allow running within ECS
              - Effect: Allow
                Action:
                - ecs:DeregisterContainerInstance
                - ecs:DiscoverPollEndpoint
                - ecs:Poll
                - ecs:RegisterContainerInstance
                - ecs:StartTelemetrySession
                - ecs:Submit*
                - ecs:ListTasks
                - ecs:ListTaskDefinitions
                - ecs:RunTask
                - ecr:BatchCheckLayerAvailability
                - ecr:BatchGetImage
                - ecr:GetDownloadUrlForLayer
                - ecr:GetAuthorizationToken
                - ecs:DescribeClusters
                - ecs:ListServices
                - ecs:ListContainerInstances
                - ecs:DescribeServices
                - ecs:DescribeContainerInstances
                Resource:
                - "*"

              # Allow Lambda logging
              - Effect: Allow
                Action:
                - logs:DescribeLogStreams
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

              # Allow Cloudwatch metrics access - needed to get S3 bucket size
              - Effect: Allow
                Action:
                - cloudwatch:GetMetricStatistics
                Resource: "*"


  # needed for EC2 instances
  CumulusInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ECSRole

  # role for Lambdas that are NOT used with APIGateway
  ProcessingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ProcessingLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow Lambda logging
              - Effect: Allow
                Action:
                - logs:DescribeLogStreams
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

              # Allow writing to ingest buckets
              - Effect: Allow
                Action:
                - s3:AbortMultipartUpload
                - s3:Get*
                - s3:Put*
                - s3:List*
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                Resource:
                - !Sub arn:aws:s3:::{{buckets.internal}}
                - !Sub arn:aws:s3:::{{buckets.internal}}/*
                - !Sub arn:aws:s3:::{{buckets.private}}
                - !Sub arn:aws:s3:::{{buckets.private}}/*
                - !Sub arn:aws:s3:::{{buckets.protected}}
                - !Sub arn:aws:s3:::{{buckets.protected}}/*
                - !Sub arn:aws:s3:::{{buckets.public}}
                - !Sub arn:aws:s3:::{{buckets.public}}/*

              # Allow access to dynamoDB
              - Effect: Allow
                Action:
                - dynamodb:DeleteItem
                - dynamodb:DescribeStream
                - dynamodb:GetItem
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
                - dynamodb:ListTables
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:UpdateItem
                Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{stackName}}-*

              # Allow lambdas to call other lambdas
              - Effect: Allow
                Action:
                - lambda:GetFunction
                - lambda:invokeFunction
                Resource:
                - "*"

              # Allow access to SQS
              - Effect: Allow
                Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:ChangeMessageVisibility
                - sqs:DeleteMessage
                - sqs:GetQueueUrl
                - sqs:GetQueueAttributes
                Resource:
                - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:{{stackName}}-*"


  # Role for Lambdas that are USED with ApiGateway Service
  LambdaApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaApiGateway
        PolicyDocument:
          Version: '2012-10-17'
          Statement:

          # Allow Lambda logging
          - Effect: Allow
            Action:
            - logs:DescribeLogStreams
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

          # Allow access to dynamoDB
          - Effect: Allow
            Action:
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetItem
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            - dynamodb:ListTables
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            Resource:
            - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{stackName}}-*

          # Allow lambdas to call other lambdas
          - Effect: Allow
            Action:
            - lambda:GetFunction
            - lambda:invokeFunction
            Resource:
            - "*"

          # Allow reading from protected bucket
          - Effect: Allow
            Action:
            - s3:Get*
            Resource:
            - !Sub arn:aws:s3:::{{buckets.internal}}
            - !Sub arn:aws:s3:::{{buckets.internal}}/*
            - !Sub arn:aws:s3:::{{buckets.protected}}
            - !Sub arn:aws:s3:::{{buckets.protected}}/*

          # Allow access to SQS
          - Effect: Allow
            Action:
            - sqs:GetQueueUrl
            - sqs:GetQueueAttributes
            - sqs:SendMessage
            Resource:
            - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:{{stackName}}-*"


  #################################################
  # SQS config BEGIN
  #################################################
{{#each sqs}}
  {{name}}SQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: {{stackName}}-{{stage}}-{{name}}
      ReceiveMessageWaitTimeSeconds: 20
    {{#if retry}}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt [{{name}}FailedSQS, Arn]
        maxReceiveCount: {{retry}}
    {{/if}}
      VisibilityTimeout: {{visibilityTimeout}}

{{#if retry}}
  {{name}}FailedSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: {{stackName}}-{{stage}}-{{name}}-failed

{{/if}}
{{/each}}
  #################################################
  # SQS config END
  #################################################


  #################################################
  # ECS config BEGIN
  #################################################

  LambdaRunnerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {{stackName}}-{{stage}}-lambdarunner

  CumulusECSCluster:
    Type: AWS::ECS::Cluster

  CumulusContainerInstanceLaunch:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${CumulusECSCluster} >> /etc/ecs/ecs.config
                echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1m >> /etc/ecs/ecs.config

          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.CumulusContainerInstanceLaunch.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource CumulusContainerInstanceLaunch --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      AssociatePublicIpAddress: false
      SecurityGroups:
        -  {{ecs.securityGroup}}
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMIID]
      InstanceType: {{ecs.instanceType}}
      IamInstanceProfile: !Ref CumulusInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/xvdcz"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 100
          VolumeType: gp2
      KeyName: {{ ecs.keyPairName }}
      UserData:
        "Fn::Base64": !Join
          - ""
          - - "#cloud-config\n"
            - "\nruncmd:\n"
            - " - yum install -y aws-cfn-bootstrap\n"
            - !Sub " - /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource CumulusContainerInstanceLaunch --region ${AWS::Region}\n"
            - !Sub " - /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource CumulusECSAutoScalingGroup --region ${AWS::Region}\n"

  CumulusECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
    Properties:
      AvailabilityZones:
        - {{ecs.availabilityZone}}
      VPCZoneIdentifier:
        - {{ecs.subnet}}
      LaunchConfigurationName: !Ref CumulusContainerInstanceLaunch
      MinSize: '0'
      MaxSize: {{ ecs.maxInstances }}
      DesiredCapacity: {{ ecs.desiredInstances }}
      Tags:
      - Key: Name
        Value: "{{stackName}} ECS"
        PropagateAtLaunch: true


{{#each images}}
  # adding TaskDefinition for Lambda/ECS services
  {{name}}TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: {{stackName}}-{{stage}}-{{name}}-TaskDefinition
      ContainerDefinitions:
      - Name: {{name}}
        Environment:
          - Name: distributionEndpoint
            Value: {{distributionEndpoint}}
        {{#each envs}}
          - Name: {{key}}
            Value: !Sub {{value}}
        {{/each}}
        Cpu: {{cpu}}
        Essential: true
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{{image}}
        MemoryReservation: {{memory}}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref {{name}}DockerLogs
            awslogs-region: !Sub ${AWS::Region}

  {{name}}DockerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {{stackName}}-{{stage}}-{{name}}

{{/each}}

  #################################################
  # ECS config END
  #################################################

  #################################################
  # ElasticSearch config BEGIN
  #################################################
  Elasticsearch5Domain:
    Type: "AWS::Elasticsearch::Domain"
    Properties:
      DomainName: {{stackName}}-{{stage}}-es-5
      ElasticsearchVersion: 5.1
      ElasticsearchClusterConfig:
        InstanceCount: "1"
        InstanceType: "m3.medium.elasticsearch"
      SnapshotOptions:
        AutomatedSnapshotStartHour: "0"
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp2
        VolumeSize: 50
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: "true"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                - Fn::GetAtt:
                  - ProcessingLambdaRole
                  - Arn
            Action: "es:*"
            Resource:
              - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/{{stackName}}-{{stage}}-es-5/*"
          - Effect: "Allow"
            Principal:
              AWS:
                - Fn::GetAtt:
                  - ECSRole
                  - Arn
            Action: "es:*"
            Resource:
              - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/{{stackName}}-{{stage}}-es-5/*"
          - Effect: "Allow"
            Principal:
              AWS:
                - Fn::GetAtt:
                  - LambdaApiGatewayRole
                  - Arn
            Action: "es:*"
            Resource:
              - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/{{stackName}}-{{stage}}-es-5/*"
          - Effect: "Allow"
            Principal:
              AWS:
                - arn:aws:iam::985962406024:user/alireza@developmentseed.org
            Action: "es:*"
            Resource:
              - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/{{stackName}}-{{stage}}-es-5/*"

  #################################################
  # ElasticSearch config END
  #################################################

  #################################################
  # DynamoDB config BEGIN
  #################################################
{{#each dynamos}}
  {{name}}DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
    {{#each attributes}}
      - AttributeName: {{name}}
        AttributeType: {{type}}
    {{/each}}
      KeySchema:
    {{#each schema}}
      - AttributeName: {{name}}
        KeyType: {{type}}
    {{/each}}
      ProvisionedThroughput:
        ReadCapacityUnits: {{read}}
        WriteCapacityUnits: {{write}}
      TableName: {{stackName}}-{{stage}}-{{name}}
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"

{{# if elasticsearch}}
  {{name}}EventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn:
        Fn::GetAtt:
          - {{name}}DynamoDB
          - "StreamArn"
      FunctionName:
        Fn::GetAtt:
          - esLambdaFunction
          - "Arn"
      BatchSize: 10
      StartingPosition: "TRIM_HORIZON"
{{/if}}

{{/each}}

  #################################################
  # DyanmoDB config END
  #################################################

  #################################################
  # APIGateway config BEGIN
  #################################################
{{# if apiMethods}}

{{# each apiDependencies}}
  ApiGatewayDeployment{{name}}:
    DependsOn:
  {{#each methods}}
    - {{name}}
  {{/each}}
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: {{name}}RestApi
      StageName: {{stage}}
{{/each}}

{{#each apiMethods}}
  {{name}}:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: {{resource}}
      RestApiId:
        Ref: {{api}}RestApi
      HttpMethod: {{method}}
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - {{lambda}}LambdaFunction
              - Arn
            - /invocations

{{/each}}

{{#each apiMethodsOptions}}
  {{name}}:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET,DELETE'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
          StatusCode: '200'
        RequestTemplates:
          application/json: '{statusCode:200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels: {}
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        StatusCode: '200'
      RequestParameters:
        method.request.header.Authorization: true
      ResourceId:
        Ref: {{resource}}
      RestApiId:
        Ref: {{api}}RestApi

{{/each}}

{{#each apiResources}}
  {{name}}:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
      {{#each parents}}
        {{this}}
      {{/each}}
      PathPart: '{{pathPart}}'
      RestApiId:
        Ref: {{api}}RestApi

{{/each}}

{{#each apis}}
  {{name}}RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: {{stackName}}-{{stage}}-{{name}}

{{/each}}
{{/if}}
  #################################################
  # APIGateway config END
  #################################################

  #################################################
  # Lambda config BEGIN
  #################################################
{{#each lambdas}}
  {{name}}LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ConfigS3Bucket
        S3Key: !Sub {{stackName}}-{{stage}}/${ArtifactPath}/lambda/{{zipFile}}.zip
      FunctionName: {{stackName}}-{{name}}-{{stage}}
      Environment:
        Variables:
          ES_HOST:
            Fn::GetAtt:
              - Elasticsearch5Domain
              - DomainEndpoint
        {{#each envs}}
          {{key}}: !Sub {{value}}
        {{/each}}
      Handler: {{handler}}
      MemorySize: {{memory}}
      Role:
        Fn::GetAtt:
      {{# if apiGateway }}
        - LambdaApiGatewayRole
      {{else}}
        - ProcessingLambdaRole
      {{/if}}
        - Arn
      Runtime: nodejs4.3
      Timeout: {{timeout}}

{{# if apiGateway }}
  {{name}}LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - {{name}}LambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
{{/if}}

{{# if services }}
{{#each services}}
  # adding TaskDefinition for Lambda/ECS services
  {{name}}TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: {{name}}
        Environment:
          - Name: AWS_DEFAULT_REGION
            Value: !Sub ${AWS::Region}
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: CumulusCluster
            Value: !Ref CumulusECSCluster
          - Name: ES_HOST
            Value:
              Fn::GetAtt:
              - Elasticsearch5Domain
              - DomainEndpoint
        {{#each envs}}
          - Name: {{key}}
            Value: !Sub {{value}}
        {{/each}}
        Command:
        - !GetAtt [{{lambdaName}}LambdaFunction, Arn]
    {{# if commands }}
      {{# each commands }}
        - "{{{ @this }}}"
      {{/each}}
    {{ else }}
        - "--eventJson"
        - "{}"
    {{/if}}
        Cpu: {{#if cpu }}{{ cpu }}{{ else }}10{{/if}}
        Essential: true
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{{image}}
        MemoryReservation: {{#if memory }}{{ memory }}{{ else }}256{{/if}}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref {{name}}EcsLogs
            awslogs-region: !Sub ${AWS::Region}

  {{name}}EcsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {{stackName}}-{{stage}}-{{name}}EcsLogs

  {{name}}ECSService:
    Type: AWS::ECS::Service
    DependsOn:
    - CumulusECSAutoScalingGroup
    - {{lambdaName}}LambdaFunction
    Properties:
      Cluster: !Ref CumulusECSCluster
      DesiredCount: {{# if count}}{{count}}{{ else }} 0 {{/if}}
      TaskDefinition: !Ref {{name}}TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

{{/each}}
{{/if}}
{{/each}}
  #################################################
  # Lambda config END
  #################################################

Mappings:
  AWSRegionToAMI:
    DOCS:
      LIST: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    us-west-2:
      AMIID: ami-241bd844
    us-east-1:
      AMIID: ami-275ffe31
